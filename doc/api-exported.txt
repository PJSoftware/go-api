package api // import "github.com/pjsoftware/go-api"


CONSTANTS

const Version = "v0.4.13"

VARIABLES

var (
	ErrUnsupported = errors.New("unsupported status code")
	ErrInformation = errors.New("for information")
	ErrSuccess     = errors.New("success but requires attention")
	ErrRedirection = errors.New("redirection response")
	ErrClient      = errors.New("client error")
	ErrServer      = errors.New("server error")
)
var ErrTimeout = fmt.Errorf("timeout duration exceeded")

TYPES

type APIData struct {
	Options *Options
	// Has unexported fields.
}
    APIData is the main export from go-api; it is generated via api.New()

func New(rootURL string) *APIData
    api.New() returns a new APIData object based on the specified URL. The
    rootURL string should be the base URL for the API

func (a *APIData) Ident() string
    api.Ident() returns an ident string based on api name, url, and package
    version

func (a *APIData) NewEndpoint(epURL string) *Endpoint
    (*APIData).NewEndpoint returns a new *Endpoint object

func (a *APIData) Version() string
    api.Version() returns the current package version

type Endpoint struct {
	// Has unexported fields.
}
    Each Endpoint should be individually managed by the client code. An Endpoint
    is generated via api.NewEndpoint()

func (e *Endpoint) NewRequest() *Request
    Initialise new empty API request on specified endpoint

func (e *Endpoint) URL() string
    (*Endpoint).URL() returns the full URL for that endpoint

type OptFunc func(*Options)

func RateLimit(callsPerMinute int) OptFunc
    Option: Set Rate Limit to specified number of calls per minute

    TODO: Rate limiting currently not implemented; added to support client calls

func Timeout(maxMillisecondsElapsed int) OptFunc
    Option: Set Timeout in milliseconds. Any API calls which take longer than
    the specified timeout will be cancelled (and return a timeout error)

type Options struct {
	// Has unexported fields.
}

func (o *Options) Set(opts ...OptFunc)
    Set API options. Can be set on the *APIData object (via api.Options.Set()),
    in which case they provide the default value for each subsequent call -- or
    they can be set on individual *Requests (via req.Options.Set())

    Available options: RateLimit(n), Timeout(n)

type PackageError struct {
	// Has unexported fields.
}
    PackageError is essentially just a "decorator"-style error

func (pe *PackageError) Unwrap() error

type QueryError struct {
	// Has unexported fields.
}

func (qe *QueryError) Error() string

func (qe *QueryError) Response() *Response

func (qe *QueryError) Status() int

func (qe *QueryError) Unwrap() error

type Request struct {
	Options *Options
	// Has unexported fields.
}
    An individual Request is used to communicate with the external API.
    A Request is generated via (*Endpoint).NewRequest()

func (r *Request) AddBodyKV(key, value string) *Request
    Add a line (in "key=value" format) to the Body of a request

func (r *Request) AddHeader(key, value string) *Request
    Add Header to a request

func (r *Request) AddQuery(key, value string) *Request
    Add Query (passed in GET URL) to a request

func (r *Request) AddQueryBool(key string, value bool) *Request
    AddQueryBool (passed in GET URL) adds a bool value to a request

func (r *Request) AddQueryInt(key string, value int) *Request
    AddQueryInt (passed in GET URL) adds an int value to a request

func (r *Request) FormEncoded()
    FormEncoded adds a predefined (Content-Type) header to a request

func (r *Request) GET() (*Response, error)
    (*Request).GET() processes a GET call to the API

func (r *Request) POST() (*Response, error)
    (*Request).POST() processes a POST call to the API

func (r *Request) RawQueryURL() (string, error)
    (*Request).RawQueryURL() generates the GET URL that would be generated by
    the Request and its query key/value pairs, and returns it as a string.
    This can be useful for Callback situations.

func (r *Request) SetBodyJSON(v any) *Request
    Set the body of the request to a block of JSON-formatted text

    TODO: implement proper error handling here

type Response struct {
	Status int
	Body   string
}

